class ToggleForms extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: '',
      addressLine1: '',
      addressLine2: '',
      addressCity: '',
      addressState: '',
      addressZipCode: '',
      creditCardNo: '',
      expiryDate: '',
      CVV: '',
      billingZipCode: ''
    };
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleInput = this.handleInput.bind(this);
  }

  handleSubmit(event) {
    event.preventDefault();
    let s = this.state;
    let info = {};

    switch (this.props.checkoutStatus) {
      case 'F1':
        {
          info = {
            name: s.name,
            password: s.password,
            email: s.email
          };
          break;
        }

      case 'F2':
        {
          info = {
            addressLine1: s.addressLine1,
            addressLine2: s.addressLine2,
            addressCity: s.addressCity,
            addressState: s.addressState,
            addressZipCode: s.addressZipCode
          };
          break;
        }

      case 'F3':
        {
          info = {
            creditCardNo: s.creditCardNo,
            expiryDate: s.expiryDate,
            CVV: s.CVV,
            billingZipCode: s.billingZipCode
          };
          break;
        }
    }

    console.log(info);
    this.props.submit(info);
    this.props.nextStep(this.props.checkoutStatus);
  }

  handleInput(event) {
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    let text = '';
    let [box1, box2, box3, box4, box5] = ['', '', '', '', ''];
    let [formBox4Class, formBox5Class] = ["hideMe formBox4", "hideMe formBox5"];

    switch (this.props.checkoutStatus) {
      case 'F1':
        {
          text = 'Please enter your login details:';
          [box1, box2, box3, box4, box5] = ['name', 'email', 'password', null, null];
          break;
        }

      case 'F2':
        {
          text = 'Please enter your shipping details:';
          [box1, box2, box3, box4, box5] = ['addressLine1', 'addressLine2', 'addressCity', 'addressState', 'addressZipCode'];
          [formBox4Class, formBox5Class] = ["showMe formBox4", "showMe formBox5"];
          break;
        }

      case 'F3':
        {
          text = 'Please enter your credit card details:';
          [box1, box2, box3, box4, box5] = ['creditCardNo', 'expiryDate', 'CVV', 'billingZipCode', null];
          [formBox4Class, formBox5Class] = ["showMe formBox4", "hideMe formBox5"];
          break;
        }

      case 'F0':
      default:
        {
          text = 'Welcome to self-checkout! Please finalize your purchase for today.';
          [box1, box2, box3, box4, box5] = ['', '', '', '', ''];
          break;
        }
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, text, /*#__PURE__*/React.createElement("div", {
      className: this.props.checkoutStatus === "F0" ? "hideMe" : "showMe"
    }, /*#__PURE__*/React.createElement("span", {
      className: "formBox1"
    }, box1, /*#__PURE__*/React.createElement("input", {
      name: box1,
      value: this.state[box1],
      onChange: this.handleInput
    })), /*#__PURE__*/React.createElement("span", {
      className: "formBox2"
    }, box2, /*#__PURE__*/React.createElement("input", {
      name: box2,
      value: this.state[box2],
      onChange: this.handleInput
    })), /*#__PURE__*/React.createElement("span", {
      className: "formBox3"
    }, box3, /*#__PURE__*/React.createElement("input", {
      name: box3,
      value: this.state[box3],
      onChange: this.handleInput
    }))), /*#__PURE__*/React.createElement("span", {
      className: formBox4Class
    }, box4, /*#__PURE__*/React.createElement("input", {
      name: box4,
      value: this.state[box4],
      onChange: this.handleInput
    })), /*#__PURE__*/React.createElement("span", {
      className: formBox5Class
    }, box5, /*#__PURE__*/React.createElement("input", {
      name: box5,
      value: this.state[box5],
      onChange: this.handleInput
    })), /*#__PURE__*/React.createElement("button", {
      className: "next",
      name: this.props.checkoutStatus
    }, "Next Step")));
  }

}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      checkoutStatus: ''
    };
    this.nextButton = this.nextButton.bind(this);
    this.handleSubmission = this.handleSubmission.bind(this);
  }

  componentDidMount() {
    this.setState({
      checkoutStatus: 'F0'
    });
  }

  nextButton(status) {
    let newStatus = 'F' + (parseInt(status.slice(1)) + 1);

    if (newStatus === 'F4') {
      newStatus = 'F0';
    }

    console.log('newStatus', newStatus);
    this.setState({
      checkoutStatus: newStatus
    });
  }

  handleSubmission(submission) {
    console.log('received items on submission', submission);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ToggleForms, {
      checkoutStatus: this.state.checkoutStatus,
      submit: this.handleSubmission,
      nextStep: this.nextButton
    }));
  }

}

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9hcHAuanN4Il0sIm5hbWVzIjpbIlRvZ2dsZUZvcm1zIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImFkZHJlc3NMaW5lMSIsImFkZHJlc3NMaW5lMiIsImFkZHJlc3NDaXR5IiwiYWRkcmVzc1N0YXRlIiwiYWRkcmVzc1ppcENvZGUiLCJjcmVkaXRDYXJkTm8iLCJleHBpcnlEYXRlIiwiQ1ZWIiwiYmlsbGluZ1ppcENvZGUiLCJoYW5kbGVTdWJtaXQiLCJiaW5kIiwiaGFuZGxlSW5wdXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicyIsImluZm8iLCJjaGVja291dFN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJzdWJtaXQiLCJuZXh0U3RlcCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJyZW5kZXIiLCJ0ZXh0IiwiYm94MSIsImJveDIiLCJib3gzIiwiYm94NCIsImJveDUiLCJmb3JtQm94NENsYXNzIiwiZm9ybUJveDVDbGFzcyIsIkFwcCIsIm5leHRCdXR0b24iLCJoYW5kbGVTdWJtaXNzaW9uIiwiY29tcG9uZW50RGlkTW91bnQiLCJzdGF0dXMiLCJuZXdTdGF0dXMiLCJwYXJzZUludCIsInNsaWNlIiwic3VibWlzc2lvbiIsIlJlYWN0RE9NIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsV0FBTixTQUEwQkMsS0FBSyxDQUFDQyxTQUFoQyxDQUEwQztBQUN4Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYztBQUNaQyxNQUFBQSxJQUFJLEVBQUUsRUFETTtBQUVaQyxNQUFBQSxLQUFLLEVBQUUsRUFGSztBQUdaQyxNQUFBQSxRQUFRLEVBQUUsRUFIRTtBQUlaQyxNQUFBQSxZQUFZLEVBQUUsRUFKRjtBQUta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RUFBYTtBQUMzQnhCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDhCQUFaLEVBQTRDdUIsVUFBNUM7QUFDRDs7QUFFRGpCLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUNFLDhDQUNFLG9CQUFDLFdBQUQ7QUFBYSxNQUFBLGNBQWMsRUFBRSxLQUFLNUIsS0FBTCxDQUFXb0IsY0FBeEM7QUFBd0QsTUFBQSxNQUFNLEVBQUUsS0FBS21CLGdCQUFyRTtBQUF1RixNQUFBLFFBQVEsRUFBRSxLQUFLRDtBQUF0RyxNQURGLENBREY7QUFLRDs7QUF0QytCOztBQXlDbENRLFFBQVEsQ0FBQ2xCLE1BQVQsZUFBZ0Isb0JBQUMsR0FBRCxPQUFoQixFQUF5Qm1CLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixLQUF4QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRvZ2dsZUZvcm1zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9ICh7XHJcbiAgICAgIG5hbWU6ICcnLFxyXG4gICAgICBlbWFpbDogJycsXHJcbiAgICAgIHBhc3N3b3JkOiAnJyxcclxuICAgICAgYWRkcmVzc0xpbmUxOiAnJyxcclxuICAgICAgYWRkcmVzc0xpbmUyOiAnJyxcclxuICAgICAgYWRkcmVzc0NpdHk6ICcnLFxyXG4gICAgICBhZGRyZXNzU3RhdGU6ICcnLFxyXG4gICAgICBhZGRyZXNzWmlwQ29kZTogJycsXHJcbiAgICAgIGNyZWRpdENhcmRObzogJycsXHJcbiAgICAgIGV4cGlyeURhdGU6ICcnLFxyXG4gICAgICBDVlY6ICcnLFxyXG4gICAgICBiaWxsaW5nWmlwQ29kZTogJycsXHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlSW5wdXQgPSB0aGlzLmhhbmRsZUlucHV0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBsZXQgcyA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgaW5mbyA9IHt9O1xyXG4gICAgc3dpdGNoKHRoaXMucHJvcHMuY2hlY2tvdXRTdGF0dXMpIHtcclxuICAgICAgY2FzZSAnRjEnOiB7XHJcbiAgICAgICAgaW5mbyA9IHtuYW1lOiBzLm5hbWUsIHBhc3N3b3JkOiBzLnBhc3N3b3JkLCBlbWFpbDogcy5lbWFpbH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdGMic6IHtcclxuICAgICAgICBpbmZvID0ge2FkZHJlc3NMaW5lMTogcy5hZGRyZXNzTGluZTEsIGFkZHJlc3NMaW5lMjogcy5hZGRyZXNzTGluZTIsIGFkZHJlc3NDaXR5OiBzLmFkZHJlc3NDaXR5LCBhZGRyZXNzU3RhdGU6IHMuYWRkcmVzc1N0YXRlLCBhZGRyZXNzWmlwQ29kZTogcy5hZGRyZXNzWmlwQ29kZX1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdGMyc6IHtcclxuICAgICAgICBpbmZvID0ge2NyZWRpdENhcmRObzogcy5jcmVkaXRDYXJkTm8sIGV4cGlyeURhdGU6IHMuZXhwaXJ5RGF0ZSwgQ1ZWOiBzLkNWViwgYmlsbGluZ1ppcENvZGU6IHMuYmlsbGluZ1ppcENvZGV9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGluZm8pO1xyXG4gICAgdGhpcy5wcm9wcy5zdWJtaXQoaW5mbyk7XHJcbiAgICB0aGlzLnByb3BzLm5leHRTdGVwKHRoaXMucHJvcHMuY2hlY2tvdXRTdGF0dXMpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlSW5wdXQoZXZlbnQpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIFtldmVudC50YXJnZXQubmFtZV06IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgfSlcclxuXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBsZXQgdGV4dCA9ICcnO1xyXG4gICAgbGV0IFtib3gxLCBib3gyLCBib3gzLCBib3g0LCBib3g1XSA9IFsnJywnJywnJywnJywnJ11cclxuICAgIGxldCBbZm9ybUJveDRDbGFzcywgZm9ybUJveDVDbGFzc10gPSBbXCJoaWRlTWUgZm9ybUJveDRcIiwgXCJoaWRlTWUgZm9ybUJveDVcIl07XHJcbiAgICAgc3dpdGNoKHRoaXMucHJvcHMuY2hlY2tvdXRTdGF0dXMpIHtcclxuICAgICAgY2FzZSAnRjEnOiB7XHJcbiAgICAgICAgdGV4dCA9ICdQbGVhc2UgZW50ZXIgeW91ciBsb2dpbiBkZXRhaWxzOic7XHJcbiAgICAgICAgW2JveDEsIGJveDIsIGJveDMsIGJveDQsIGJveDVdID0gWyduYW1lJywgJ2VtYWlsJywgJ3Bhc3N3b3JkJywgbnVsbCwgbnVsbF07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnRjInOiB7XHJcbiAgICAgICAgdGV4dCA9ICdQbGVhc2UgZW50ZXIgeW91ciBzaGlwcGluZyBkZXRhaWxzOic7XHJcbiAgICAgICAgW2JveDEsIGJveDIsIGJveDMsIGJveDQsIGJveDVdID0gWydhZGRyZXNzTGluZTEnLCAnYWRkcmVzc0xpbmUyJywgJ2FkZHJlc3NDaXR5JywgJ2FkZHJlc3NTdGF0ZScsICdhZGRyZXNzWmlwQ29kZSddO1xyXG4gICAgICAgIFtmb3JtQm94NENsYXNzLCBmb3JtQm94NUNsYXNzXSA9IFtcInNob3dNZSBmb3JtQm94NFwiLCBcInNob3dNZSBmb3JtQm94NVwiXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdGMyc6IHtcclxuICAgICAgICB0ZXh0ID0gJ1BsZWFzZSBlbnRlciB5b3VyIGNyZWRpdCBjYXJkIGRldGFpbHM6JztcclxuICAgICAgICBbYm94MSwgYm94MiwgYm94MywgYm94NCwgYm94NV0gPSBbJ2NyZWRpdENhcmRObycsICdleHBpcnlEYXRlJywgJ0NWVicsICdiaWxsaW5nWmlwQ29kZScsIG51bGxdO1xyXG4gICAgICAgIFtmb3JtQm94NENsYXNzLCBmb3JtQm94NUNsYXNzXSA9IFtcInNob3dNZSBmb3JtQm94NFwiLCBcImhpZGVNZSBmb3JtQm94NVwiXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdGMCc6XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICB0ZXh0ID0gJ1dlbGNvbWUgdG8gc2VsZi1jaGVja291dCEgUGxlYXNlIGZpbmFsaXplIHlvdXIgcHVyY2hhc2UgZm9yIHRvZGF5Lic7XHJcbiAgICAgICAgW2JveDEsIGJveDIsIGJveDMsIGJveDQsIGJveDVdID0gWycnLCAnJywgJycsICcnLCAnJ107XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+e3RleHR9XHJcbiAgICAgICAgICA8ZGl2ICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2hlY2tvdXRTdGF0dXMgPT09IFwiRjBcIiA/IFwiaGlkZU1lXCIgOiBcInNob3dNZVwifT5cclxuICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e1wiZm9ybUJveDFcIn0+e2JveDF9XHJcbiAgICAgICAgICAgPGlucHV0IG5hbWU9e2JveDF9IHZhbHVlPXt0aGlzLnN0YXRlW2JveDFdfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH0+PC9pbnB1dD5cclxuICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9ybUJveDJcIj57Ym94Mn1cclxuICAgICAgICAgICA8aW5wdXQgbmFtZT17Ym94Mn0gdmFsdWU9e3RoaXMuc3RhdGVbYm94Ml19IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fT48L2lucHV0PlxyXG4gICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb3JtQm94M1wiPntib3gzfVxyXG4gICAgICAgICAgIDxpbnB1dCBuYW1lPXtib3gzfSB2YWx1ZT17dGhpcy5zdGF0ZVtib3gzXX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXR9PjwvaW5wdXQ+XHJcbiAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17Zm9ybUJveDRDbGFzc30+e2JveDR9XHJcbiAgICAgICAgICAgPGlucHV0IG5hbWU9e2JveDR9IHZhbHVlPXt0aGlzLnN0YXRlW2JveDRdfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH0+PC9pbnB1dD5cclxuICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtmb3JtQm94NUNsYXNzfT57Ym94NX1cclxuICAgICAgICAgICA8aW5wdXQgbmFtZT17Ym94NX0gdmFsdWU9e3RoaXMuc3RhdGVbYm94NV19IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fT48L2lucHV0PlxyXG4gICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5leHRcIiBuYW1lPXt0aGlzLnByb3BzLmNoZWNrb3V0U3RhdHVzfT5OZXh0IFN0ZXA8L2J1dHRvbj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyIChwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0gKHtcclxuICAgICAgY2hlY2tvdXRTdGF0dXM6ICcnLFxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLm5leHRCdXR0b24gPSB0aGlzLm5leHRCdXR0b24uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlU3VibWlzc2lvbiA9IHRoaXMuaGFuZGxlU3VibWlzc2lvbi5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlICh7XHJcbiAgICAgIGNoZWNrb3V0U3RhdHVzOiAnRjAnXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgbmV4dEJ1dHRvbihzdGF0dXMpIHtcclxuICAgIGxldCBuZXdTdGF0dXMgPSAnRicgKyAocGFyc2VJbnQoc3RhdHVzLnNsaWNlKDEpKSArIDEpO1xyXG4gICAgaWYgKG5ld1N0YXR1cyA9PT0gJ0Y0Jykge1xyXG4gICAgICBuZXdTdGF0dXMgPSAnRjAnO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coJ25ld1N0YXR1cycsIG5ld1N0YXR1cyk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgY2hlY2tvdXRTdGF0dXM6IG5ld1N0YXR1cyxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBoYW5kbGVTdWJtaXNzaW9uKHN1Ym1pc3Npb24pIHtcclxuICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlZCBpdGVtcyBvbiBzdWJtaXNzaW9uJywgc3VibWlzc2lvbilcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8VG9nZ2xlRm9ybXMgY2hlY2tvdXRTdGF0dXM9e3RoaXMuc3RhdGUuY2hlY2tvdXRTdGF0dXN9IHN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXNzaW9ufSBuZXh0U3RlcD17dGhpcy5uZXh0QnV0dG9ufS8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSlcclxuXHJcblxyXG4iXX0=